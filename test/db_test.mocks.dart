// Mocks generated by Mockito 5.4.0 from annotations
// in replaceAppName/test/db_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:math' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:replaceAppName/src/models/game_board.dart' as _i5;
import 'package:replaceAppName/src/services/database_service.dart' as _i3;
import 'package:supabase_flutter/supabase_flutter.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSupabaseClient_0 extends _i1.SmartFake
    implements _i2.SupabaseClient {
  _FakeSupabaseClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i3.Database {
  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);
  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set id(int? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set subscribed(dynamic _subscribed) => super.noSuchMethod(
        Invocation.setter(
          #subscribed,
          _subscribed,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<String> createNewGame() => (super.noSuchMethod(
        Invocation.method(
          #createNewGame,
          [],
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  _i4.Future<dynamic> joinRoom() => (super.noSuchMethod(
        Invocation.method(
          #joinRoom,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<List<dynamic>> getAvailableRooms() => (super.noSuchMethod(
        Invocation.method(
          #getAvailableRooms,
          [],
        ),
        returnValue: _i4.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub: _i4.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i4.Future<List<dynamic>>);
  @override
  _i4.Future<void> updateGamePieces(
    _i5.GameBoard? board,
    String? otherPlayerTurnColor,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGamePieces,
          [
            board,
            otherPlayerTurnColor,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Stream<dynamic> createStream() => (super.noSuchMethod(
        Invocation.method(
          #createStream,
          [],
        ),
        returnValue: _i4.Stream<dynamic>.empty(),
        returnValueForMissingStub: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);
  @override
  _i4.Future<String> getAvailableColor() => (super.noSuchMethod(
        Invocation.method(
          #getAvailableSlot,
          [],
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  void resetPieces(_i5.GameBoard? board) => super.noSuchMethod(
        Invocation.method(
          #resetPieces,
          [board],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Random].
///
/// See the documentation for Mockito's code generation for more information.
class MockRandom extends _i1.Mock implements _i6.Random {
  @override
  int nextInt(int? max) => (super.noSuchMethod(
        Invocation.method(
          #nextInt,
          [max],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  double nextDouble() => (super.noSuchMethod(
        Invocation.method(
          #nextDouble,
          [],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  bool nextBool() => (super.noSuchMethod(
        Invocation.method(
          #nextBool,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
